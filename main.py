import os
import logging
from logging.handlers import RotatingFileHandler
import re
import asyncio
import uuid
from functools import wraps

import paramiko
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from telegram.constants import ParseMode

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ .env ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_USER_ID = os.getenv("ADMIN_USER_ID")
SSH_HOST = os.getenv("SSH_HOST")
SSH_PORT = int(os.getenv("SSH_PORT", 22))
SSH_USER = os.getenv("SSH_USER")
SSH_KEY_PATH = os.getenv("SSH_KEY_PATH")
CPU_THRESHOLD = float(os.getenv("CPU_THRESHOLD", 90.0))
RAM_THRESHOLD = float(os.getenv("RAM_THRESHOLD", 90.0))
DISK_THRESHOLD = float(os.getenv("DISK_THRESHOLD", 95.0))

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å ---
log_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª (bot.log), —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
file_handler = RotatingFileHandler('bot.log', maxBytes=5*1024*1024, backupCount=5, encoding='utf-8')
file_handler.setFormatter(log_formatter)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler()
console_handler.setFormatter(log_formatter)
# –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
logger = logging.getLogger()
logger.setLevel(logging.INFO)
if not logger.handlers:
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ---
server_unreachable = False
threshold_alerts = {"cpu": False, "ram": False, "disk": False}

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
def admin_only(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if str(update.effective_user.id) != ADMIN_USER_ID:
            logger.warning(f"Unauthorized access denied for {update.effective_user.id}.")
            await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        return await func(update, context, *args, **kwargs)
    return wrapped

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SSH –∫–æ–º–∞–Ω–¥ ---
async def execute_ssh_command(command: str) -> str:
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ë –ø–æ SSH –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É."""
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        private_key = paramiko.RSAKey.from_private_key_file(SSH_KEY_PATH)
        await asyncio.to_thread(
            ssh.connect, SSH_HOST, port=SSH_PORT, username=SSH_USER, pkey=private_key, timeout=15
        )
        stdin, stdout, stderr = ssh.exec_command(command, timeout=30)
        output = stdout.read().decode('utf-8').strip()
        error = stderr.read().decode('utf-8').strip()
        ssh.close()
        if error:
            logger.error(f"SSH command error for '{command}': {error}")
            return f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {error}"
        return output
    except Exception as e:
        logger.error(f"SSH connection or command failed: {e}")
        return f"üö® –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É {SSH_HOST} –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É. –û—à–∏–±–∫–∞: {e}"

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
def create_progress_bar(percentage: float, length: int = 10) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä. –ü—Ä–∏–º–µ—Ä: [‚ñà‚ñà‚ñà‚ñà‚ñà-----] 50.0% """
    if not 0 <= percentage <= 100:
        percentage = 0
    filled_length = int(length * percentage // 100)
    bar = '‚ñà' * filled_length + '‚îÄ' * (length - filled_length)
    return f"[{bar}] {percentage:.1f}%"

@admin_only
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏."""
    keyboard = [
        [KeyboardButton("üìä –†–µ—Å—É—Ä—Å—ã"), KeyboardButton("üíæ –î–∏—Å–∫–∏")],
        [KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ —Å–µ—Ä–≤–µ—Ä–µ"), KeyboardButton("üöÄ SpeedTest")],
        [KeyboardButton("üîå –°–µ—Ç—å"), KeyboardButton("üìú –õ–æ–≥–∏ (/logs)"), KeyboardButton("‚öôÔ∏è –†–µ—Å—Ç–∞—Ä—Ç (/restart)")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.",
        reply_markup=reply_markup
    )

@admin_only
async def handle_text_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    text = update.message.text
    action_map = {
        "üìä –†–µ—Å—É—Ä—Å—ã": get_resources,
        "üíæ –î–∏—Å–∫–∏": get_disk_space,
        "‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ —Å–µ—Ä–≤–µ—Ä–µ": get_server_info,
        "üöÄ SpeedTest": run_speedtest,
        "üîå –°–µ—Ç—å": get_network_info,
    }
    if text in action_map:
        await action_map[text](update, context)
    elif text == "üìú –õ–æ–≥–∏ (/logs)":
         await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/logs [–ø—É—Ç—å_–∫_–ª–æ–≥—É]`", parse_mode=ParseMode.MARKDOWN)
    elif text == "‚öôÔ∏è –†–µ—Å—Ç–∞—Ä—Ç (/restart)":
         await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/restart [—Å–ª—É–∂–±–∞]`", parse_mode=ParseMode.MARKDOWN)

@admin_only
async def ping_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†—É—á–Ω–∞—è PING-–ø—Ä–æ–≤–µ—Ä–∫–∞."""
    await update.message.reply_text("üèì –ü–æ–Ω–≥! –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞...")
    response = await execute_ssh_command("echo 'OK'")
    if "OK" in response:
        await update.message.reply_text(f"‚úÖ –°–µ—Ä–≤–µ—Ä **{SSH_HOST}** –¥–æ—Å—Ç—É–ø–µ–Ω.", parse_mode=ParseMode.MARKDOWN)
    else:
        await update.message.reply_text(response, parse_mode=ParseMode.HTML)

@admin_only
async def get_resources(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É CPU –∏ RAM —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏."""
    await update.message.reply_text("‚è≥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Å—É—Ä—Å–∞—Ö...")
    ram_cmd = "free | awk 'NR==2{printf \"%.1f\", $3/$2*100}'"
    cpu_cmd = "uptime | awk -F'load average: ' '{print $2}'"
    ram_percent_str = await execute_ssh_command(ram_cmd)
    cpu_load_avg = await execute_ssh_command(cpu_cmd)
    try:
        ram_percent = float(ram_percent_str)
        ram_bar = create_progress_bar(ram_percent)
        response = (
            f"üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤**\n\n"
            f"üß† **RAM:** {ram_bar}\n"
            f"üíª **CPU Load Average:** `{cpu_load_avg.strip()}`"
        )
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
    except (ValueError, TypeError) as e:
        logger.error(f"Failed to parse resources. RAM: '{ram_percent_str}', CPU: '{cpu_load_avg}'. Error: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Å—É—Ä—Å–∞—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞.")

@admin_only
async def get_disk_space(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–∞—Ö."""
    await update.message.reply_text("‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –¥–∏—Å–∫–∞—Ö...")
    command = "df -h"
    output = await execute_ssh_command(command)
    response = f"üíæ **–ú–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–∞—Ö**\n\n<pre>{output}</pre>"
    await update.message.reply_text(response, parse_mode=ParseMode.HTML)

@admin_only
async def get_server_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥–∏—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ."""
    await update.message.reply_text("‚è≥ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ...")
    command = "hostname && lsb_release -d -s && uptime -p"
    output = await execute_ssh_command(command)
    try:
        hostname, os_version, uptime = output.split('\n')
        response = (
            f"‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ**\n\n"
            f"–°–µ—Ä–≤–µ—Ä: `{hostname}`\n"
            f"–û–°: `{os_version}`\n"
            f"–ê–ø—Ç–∞–π–º: `{uptime}`"
        )
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
    except ValueError:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n<pre>{output}</pre>", parse_mode=ParseMode.HTML)

@admin_only
async def run_speedtest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç SpeedTest –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—Ä–∞—Å–∏–≤–æ–º –≤–∏–¥–µ."""
    await update.message.reply_text("üöÄ –ó–∞–ø—É—Å–∫–∞—é SpeedTest... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.")
    command = "speedtest-cli --simple"
    output = await execute_ssh_command(command)
    try:
        ping = re.search(r"Ping: ([\d.]+) ms", output).group(1)
        download = re.search(r"Download: ([\d.]+) Mbit/s", output).group(1)
        upload = re.search(r"Upload: ([\d.]+) Mbit/s", output).group(1)
        response = (
            f"üåê **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã SpeedTest**\n\n"
            f"**Ping:** `{ping} ms`\n"
            f"**Download:** `‚Üì {download} Mbit/s`\n"
            f"**Upload:** `‚Üë {upload} Mbit/s`"
        )
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
    except AttributeError:
        logger.warning(f"Could not parse SpeedTest output. Sending raw. Output: {output}")
        response = f"üåê **–†–µ–∑—É–ª—å—Ç–∞—Ç SpeedTest (raw)**\n\n<pre>{output}</pre>"
        await update.message.reply_text(response, parse_mode=ParseMode.HTML)

@admin_only
async def restart_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é —Å–ª—É–∂–±—É."""
    service_name = " ".join(context.args)
    if not service_name:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–ª—É–∂–±—ã. –ü—Ä–∏–º–µ—Ä: `/restart nginx`")
        return
    await update.message.reply_text(f"‚öôÔ∏è –ü—ã—Ç–∞—é—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–±—É `{service_name}`...")
    command = f"sudo systemctl restart {service_name} && echo 'OK'"
    output = await execute_ssh_command(command)
    if "OK" in output:
        response = f"‚úÖ –°–ª—É–∂–±–∞ `{service_name}` —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞."
    else:
        response = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–±—É `{service_name}`.\n\n<pre>{output}</pre>"
    await update.message.reply_text(response, parse_mode=ParseMode.HTML)

@admin_only
async def view_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–±–∏—Ä–∞–µ—Ç –ª–æ–≥, —É–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –≤ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ."""
    log_path = " ".join(context.args)
    if not log_path:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É.\n*–ü—Ä–∏–º–µ—Ä:* `/logs /var/log/syslog`", parse_mode=ParseMode.MARKDOWN)
        return
    await update.message.reply_text(f"‚è≥ –°–æ–±–∏—Ä–∞—é –ª–æ–≥ `{log_path}` –∏ –≥–æ—Ç–æ–≤–ª—é —Ñ–∞–π–ª...", parse_mode=ParseMode.MARKDOWN)
    command = f"tail -n 200 {log_path}"
    output = await execute_ssh_command(command)
    if "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è" in output or not output or "No such file" in output:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥.\n–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª: `{output}`", parse_mode=ParseMode.MARKDOWN)
        return
    temp_filename = ""
    try:
        temp_filename = f"{os.path.basename(log_path)}_{uuid.uuid4()}.log"
        with open(temp_filename, "w", encoding="utf-8") as log_file:
            log_file.write(output)
        with open(temp_filename, "rb") as log_file_to_send:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=log_file_to_send,
                filename=f"{os.path.basename(log_path)}.log",
                caption=f"üìã –í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å—Ç—Ä–æ–∫ –∏–∑ –ª–æ–≥–∞ `{log_path}`",
                parse_mode=ParseMode.MARKDOWN
            )
    except Exception as e:
        logger.error(f"Failed to send log file: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞: {e}")
    finally:
        if temp_filename and os.path.exists(temp_filename):
            os.remove(temp_filename)

@admin_only
async def get_network_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–æ—Ä—Ç—ã."""
    await update.message.reply_text("‚è≥ –ü–æ–ª—É—á–∞—é —Å–µ—Ç–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
    command = "ss -tulnp"
    output = await execute_ssh_command(command)
    response = f"üîå **–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (TCP/UDP)**\n\n<pre>{output}</pre>"
    await update.message.reply_text(response, parse_mode=ParseMode.HTML)

# --- –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (–ê–≤—Ç–æ–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥) ---
async def check_server_availability(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ SSH."""
    global server_unreachable
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        private_key = paramiko.RSAKey.from_private_key_file(SSH_KEY_PATH)
        await asyncio.to_thread(
             ssh.connect, SSH_HOST, port=SSH_PORT, username=SSH_USER, pkey=private_key, timeout=10
        )
        ssh.close()
        if server_unreachable:
            await context.bot.send_message(chat_id=ADMIN_USER_ID, text=f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º {SSH_HOST}!")
            server_unreachable = False
        logger.info("Availability check: Server is UP.")
    except Exception as e:
        if not server_unreachable:
            await context.bot.send_message(chat_id=ADMIN_USER_ID, text=f"üö® –í–ù–ò–ú–ê–ù–ò–ï! –°–µ—Ä–≤–µ—Ä {SSH_HOST} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –û—à–∏–±–∫–∞: {e}")
            server_unreachable = True
        logger.error(f"Availability check: Server is DOWN. Error: {e}")

async def check_thresholds(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤."""
    global threshold_alerts
    if server_unreachable:
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU, RAM, Disk
    cpu_cmd = "top -bn1 | grep 'Cpu(s)' | sed 's/.*, *\\([0-9.]*\\)%* id.*/\\1/' | awk '{print 100 - $1}'"
    ram_cmd = "free | grep Mem | awk '{print $3/$2 * 100.0}'"
    disk_cmd = "df / | tail -n 1 | awk '{print $5}' | sed 's/%//'"
    try:
        cpu_usage = float(await execute_ssh_command(cpu_cmd))
        if cpu_usage > CPU_THRESHOLD and not threshold_alerts["cpu"]:
            threshold_alerts["cpu"] = True
            await context.bot.send_message(chat_id=ADMIN_USER_ID, text=f"üìà –í–ù–ò–ú–ê–ù–ò–ï! –ù–∞–≥—Ä—É–∑–∫–∞ CPU –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ø–æ—Ä–æ–≥: {cpu_usage:.2f}% (–ü–æ—Ä–æ–≥: {CPU_THRESHOLD}%)")
        elif cpu_usage < CPU_THRESHOLD and threshold_alerts["cpu"]:
            threshold_alerts["cpu"] = False
        
        ram_usage = float(await execute_ssh_command(ram_cmd))
        if ram_usage > RAM_THRESHOLD and not threshold_alerts["ram"]:
            threshold_alerts["ram"] = True
            await context.bot.send_message(chat_id=ADMIN_USER_ID, text=f"üìà –í–ù–ò–ú–ê–ù–ò–ï! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ø–æ—Ä–æ–≥: {ram_usage:.2f}% (–ü–æ—Ä–æ–≥: {RAM_THRESHOLD}%)")
        elif ram_usage < RAM_THRESHOLD and threshold_alerts["ram"]:
            threshold_alerts["ram"] = False
        
        disk_usage = float(await execute_ssh_command(disk_cmd))
        if disk_usage > DISK_THRESHOLD and not threshold_alerts["disk"]:
            threshold_alerts["disk"] = True
            await context.bot.send_message(chat_id=ADMIN_USER_ID, text=f"üìà –í–ù–ò–ú–ê–ù–ò–ï! –ú–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ø–æ—Ä–æ–≥: {disk_usage:.2f}% (–ü–æ—Ä–æ–≥: {DISK_THRESHOLD}%)")
        elif disk_usage < DISK_THRESHOLD and threshold_alerts["disk"]:
            threshold_alerts["disk"] = False
    except (ValueError, TypeError) as e:
        logger.error(f"Could not parse threshold values. Error: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    if not all([BOT_TOKEN, ADMIN_USER_ID, SSH_HOST, SSH_USER, SSH_KEY_PATH]):
        raise ValueError("–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env!")
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    handlers = [
        CommandHandler("start", start),
        CommandHandler("ping", ping_check),
        CommandHandler("resources", get_resources),
        CommandHandler("disk", get_disk_space),
        CommandHandler("info", get_server_info),
        CommandHandler("speedtest", run_speedtest),
        CommandHandler("restart", restart_service),
        CommandHandler("logs", view_logs),
        CommandHandler("netinfo", get_network_info),
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_commands)
    ]
    application.add_handlers(handlers)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    job_queue = application.job_queue
    job_queue.run_repeating(check_server_availability, interval=120, first=10) 
    job_queue.run_repeating(check_thresholds, interval=600, first=20)
    
    logger.info("Bot started...")
    application.run_polling()

if __name__ == "__main__":
    main()
        
